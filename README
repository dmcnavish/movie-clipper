```markdown
# 🎬 Movie Clipper — TikTok Scene Generator

CLI tool to:
✅ Programmatically download movies via torrents  
✅ Ask ChatGPT for popular scenes (via `/v1/responses` API)  
✅ Parse GPT scene timestamps  
✅ Clip scenes directly from GPT timestamps  
✅ Burn subtitles (optional, ON by default)  
✅ Output vertical 1080x1920 (or custom scale) clips for TikTok  
✅ Keeps previous runs safe by using unique filenames 🚀

---

## 🚀 How the architecture works

Single entry point:

```

index.js --action=...

````

Available actions:

| Action | What it does |
|--------|--------------|
| `download-movie` | Downloads any missing movies (via qBittorrent) |
| `clip-movie` | Clips scenes for movies |
| `all` | Runs both download + clip 🚀 |

---

## ⚙️ Setup (Mac)

### 1️⃣ Install dependencies

```bash
# Install ffmpeg
brew install ffmpeg

# Install Python 3 (if not already installed)
brew install python

# Install Node.js dependencies
npm install
````

---

## 🔑 Set OpenAI API Key

This project uses **`/v1/responses` API**, which requires a **project key** (`sk-proj-xxx`).

```bash
export OPENAI_API_KEY=sk-proj-XXXXXXXXXXXXXXXXXXXXXXXX
```

---

## 🐍 Python Virtual Environment (venv) — Recommended

```bash
python3 -m venv venv
source venv/bin/activate
pip install scenedetect
```

---

## 🎬 Run movie-clipper

### Download movies only

```bash
node index.js --action=download-movie
```

---

### Clip movies only

```bash
node index.js --action=clip-movie
```

---

### Run full pipeline (download + clip)

```bash
node index.js --action=all
```

---

### Other CLI options (work with `clip-movie` or `all`)

| Option                 | Description                                     |
| ---------------------- | ----------------------------------------------- |
| `--mock`               | Use mock static response (no API calls)         |
| `--no-subs`            | Disable subtitles in output clips               |
| `--max-scenes=N`       | Limit number of scenes to generate (default: 4) |
| `--scale=WIDTH:HEIGHT` | Set output resolution (default: 1080x1920)      |

---

### Example full run

```bash
source venv/bin/activate
node index.js --action=all --mock --max-scenes=2 --scale=540x960 --no-subs
```

---

## ✅ Example `movies.json`

```json
[
  {
    "title": "Night of the Living Dead",
    "version": "Original",
    "frame_rate": "24",
    "file_path": "./movies/night_of_the_living_dead.mp4",
    "magnet": "magnet:?xt=urn:btih:..."
  }
]
```

---

## 🚀 How torrent downloading works

1️⃣ Uses **qBittorrent Web API**
2️⃣ If movie file already exists → skip download
3️⃣ If not → add magnet → monitor progress → download to `./movies/`
4️⃣ When complete → clip-movie will process 🚀

---

## 🚀 How clipping works

1️⃣ Calls `/v1/responses` with movie title → gets popular scenes with timestamps
2️⃣ Parses GPT timestamps
3️⃣ Clips directly from movie → outputs to `./scenes/`

---

## 🚀 Output Files — Naming

✅ If a clip with the same name already exists, a **timestamp** is added:

```text
House_on_Haunted_Hill_Scene1.mp4
House_on_Haunted_Hill_Scene1_1717194859123.mp4
```

✅ Prevents ffmpeg hangs + saves all variations!

---

## 📂 Folder Structure

```
movie-clipper/
├── index.js                 # entry point
├── downloadMovies.js        # download flow
├── clipMovies.js            # clip flow
├── utils/sceneHelpers.js    # helper functions
├── movies.json              # movie list
├── scenes/                  # output clips
├── movies/                  # input movies
└── venv/                    # Python venv
```

---


🔐 Managing Credentials

This project uses qBittorrent Web UI for automated downloads.
To keep credentials safe and out of code, we use a .env file.
🚀 1️⃣ Create a .env file in project root:

# .env
QBITTORRENT_URL=http://localhost:8080

QBITTORRENT_USER=your_username 

QBITTORRENT_PASS=your_password

🚀 2️⃣ Add .env to .gitignore

# .env should NOT be committed!
.env

🚀 3️⃣ How it works

    The project uses dotenv package

    downloadMovies.js automatically loads .env and reads:

process.env.QBITTORRENT_URL
process.env.QBITTORRENT_USER
process.env.QBITTORRENT_PASS


